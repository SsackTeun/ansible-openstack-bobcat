---
- name: 페이지 갯수 계산
  ansible.builtin.uri:
    url: "{{ external_request_url }}/?ordering=last_updated&page=1&page_size=100"
    method: GET
    return_content: yes
  register: results
  delegate_to: localhost

- debug:
    var: ( results.json.count // 100 ) + 1

- name: 1페이지 부터 계산된 페이지까지 목록 가져오기
  ansible.builtin.uri:
    url: "{{ external_request_url }}/?ordering=last_updated&page={{ item }}&page_size=100"
    method: GET
    return_content: yes
  loop: "{{ range(1, (results.json.count // 100) + 2) | list }}"
      #loop: "{{ range(1, 2) | list }}"
  register: page_results
  delegate_to: localhost

- name: 목록 추출
  set_fact:
    all_names: "{{ all_names | default([]) + (page_results.results | map(attribute='json.results') | flatten | map(attribute='name') | list) }}"

- name: 각 목록의 이름을 파일에 저장합니다
  ansible.builtin.template:
    src: extract_name.j2
    dest: "{{ role_path }}/files/registry.list"
  delegate_to: localhost

- name: 태그 페이지 호출
  ansible.builtin.uri:
    url: "{{ external_request_url }}/{{ item }}/tags/?page_size=100"
    method: GET
    return_content: yes
  register: docker_hub_tags
  with_items:  "{{ lookup('file', '{{ role_path }}/files/registry.list').splitlines() }}"
  delegate_to: localhost
  failed_when: false

- name: 이미지 + 태그형태로 저장할 변수선언
  set_fact:
    images_with_tag: []

- name: 특정태그 찾기
  set_fact:
    images_with_tag: "{{ images_with_tag + [ image_prefix + item.item + ':' + specific_tag ] }}"
  when: "'{{ specific_tag }}' in item.json.results | map(attribute='name') | list"
  loop: "{{ docker_hub_tags.results }}"

- name: Save the list of images with the specific tag to a file
  ansible.builtin.template:
    src: extract_tag.j2
    dest: "{{ role_path }}/files/registry.list"
  delegate_to: localhost
